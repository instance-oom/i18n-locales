import fs from 'fs';
import path from 'path';
import { Plugin } from 'vite';
import { attempt, isError, isPlainObject, keys, keysIn, merge, setWith, throttle } from 'lodash-es';
import * as prettier from 'prettier';

const MESSAGES_VIRTUAL_MODULE_ID = '@instance-oom/i18n-locales/messages';
const LOCALES_VIRTUAL_MODULE_ID = '@instance-oom/i18n-locales/locales';
const RESOLVED_MESSAGES_VIRTUAL_MODULE_ID = `\0${MESSAGES_VIRTUAL_MODULE_ID}`;
const RESOLVED_LOCALES_VIRTUAL_MODULE_ID = `\0${LOCALES_VIRTUAL_MODULE_ID}`;

const flattenObject = (obj: any, parentKey = ''): any => {
  let result: any = {};
  const keys = keysIn(obj);
  for (const key of keys) {
    const newKey = parentKey ? `${parentKey}.${key}` : key;
    result = merge(result, isPlainObject(obj[key]) ? flattenObject(obj[key], newKey) : { [newKey]: obj[key] });
  }
  return result;
};

const getFileList = (dirPath: string) => {
  if (!fs.statSync(dirPath).isDirectory()) return [dirPath];
  const result: string[] = [];
  const entries = fs.readdirSync(dirPath);
  for (const entry of entries) {
    const files = getFileList(path.join(dirPath, entry));
    result.push(...files);
  }
  return result;
};

const getLocaleConf = (dirPath: string, flatKey: boolean) => {
  const files = getFileList(dirPath);
  const result = {};
  for (const file of files) {
    const content = fs.readFileSync(file).toString();
    const objContent = attempt(JSON.parse, content);
    if (isError(objContent)) continue;
    const itemData = flatKey ? flattenObject(objContent) : objContent;
    Object.assign(result, {}, itemData);
  }
  return result;
};

const VueI18nLocalesPlugin = (opts: { dir: string; flatKey?: boolean; root?: string; exportLocalName?: string; defaultLocale?: string }): Plugin => {
  opts = Object.assign({ flatKey: true }, opts);
  const localesDir = path.normalize(opts.dir),
    root = path.normalize(opts.root || process.cwd()),
    defaultLocale = opts.defaultLocale || 'en-us',
    exportLocalName = opts.exportLocalName || 'LOCALES';
  if (!fs.existsSync(localesDir)) throw new Error(`[i18n-locales] Dir(${opts.dir}) is not exists`);

  const getDefaultLocales = () => {
    const dirs = fs.readdirSync(localesDir);
    const index = dirs.findIndex(x => x === defaultLocale);
    const targetDir = index === -1 ? path.join(localesDir, dirs[0]) : path.join(localesDir, dirs[index]);
    if (!targetDir) return;
    return getLocaleConf(targetDir, true);
  };

  const writeConfigFiles = () => {
    const temp = getDefaultLocales();
    const stringTypePlaceholder = `__STRING__${new Date().valueOf()}`;
    const result = keys(temp).reduce((r, key) => setWith(r, key, stringTypePlaceholder, Object), {});
    const declareTypes = JSON.stringify(result, null, 2).replace(new RegExp(`\"${stringTypePlaceholder}\"`, 'g'), 'string');
    const declareContent = `/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by @instance-oom/i18n-locales
import '@vue/runtime-core';

export {}
declare global {
  namespace InstanceOOM {
    interface I18nLocalesKeyType ${declareTypes}
  }
}

declare module '@vue/runtime-core' {
  export interface ComponentCustomProperties {
    ${exportLocalName}: InstanceOOM.I18nLocalesKeyType
  }
}`.trim();
    prettier.format(declareContent, { parser: 'typescript', semi: true, singleQuote: true, tabWidth: 2 }).then(fileContent => {
      fs.writeFileSync(path.resolve(root, 'i18n-locales.d.ts'), fileContent);
    });
  };
  const writeConfigFilesThrottled = throttle(writeConfigFiles, 500);

  return {
    name: 'i18n-locales',
    enforce: 'pre',
    buildStart() {
      writeConfigFiles();
    },
    buildEnd() {
      writeConfigFiles();
    },
    resolveId(id: string) {
      switch (id) {
        case MESSAGES_VIRTUAL_MODULE_ID:
          return RESOLVED_MESSAGES_VIRTUAL_MODULE_ID;
        case LOCALES_VIRTUAL_MODULE_ID:
          return RESOLVED_LOCALES_VIRTUAL_MODULE_ID;
      }
    },
    load(id: string) {
      switch (id) {
        case RESOLVED_MESSAGES_VIRTUAL_MODULE_ID: {
          const messages: any = {};
          const dirs = fs.readdirSync(localesDir);
          for (const dir of dirs) {
            const itemPath = path.join(localesDir, dir);
            if (!fs.statSync(itemPath).isDirectory()) continue;
            if (!messages[dir]) messages[dir] = {};
            const temp = getLocaleConf(itemPath, opts.flatKey === true);
            Object.assign(messages[dir], {}, temp);
          }
          return { code: `export default ${JSON.stringify(messages)}` };
        }
        case RESOLVED_LOCALES_VIRTUAL_MODULE_ID: {
          const temp = getDefaultLocales();
          const result = keys(temp).reduce((r, key) => setWith(r, key, key, Object), {});
          const codes = `
          const localesKeyType = ${JSON.stringify(result, null, 2)};
          const createI18nLocales = () => {
            return {
              install: (app) => {
                app.config.globalProperties['${exportLocalName}'] = localesKeyType;
              },
            };
          };
          export { localesKeyType, createI18nLocales }`;
          return { code: codes };
        }
      }
    },
    async handleHotUpdate({ file, server }: any) {
      if (/\.(json5?)$/.test(file)) {
        writeConfigFilesThrottled();
        const modules = [server.moduleGraph.getModuleById(RESOLVED_MESSAGES_VIRTUAL_MODULE_ID), server.moduleGraph.getModuleById(RESOLVED_LOCALES_VIRTUAL_MODULE_ID)];
        const result = modules.filter(x => x);
        if (result.length > 0) {
          result.forEach(x => server.moduleGraph.invalidateModule(x));
          return result;
        }
      }
    },
  };
};

export default VueI18nLocalesPlugin;
